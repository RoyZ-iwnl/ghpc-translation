name: Auto Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for changes
      id: changes
      run: |
        # 检查是否有实际的代码变更（排除 .github 文件夹）
        if git diff --name-only HEAD~1 HEAD | grep -v '^\.github/' | grep -q .; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
    
    - name: Create release archive
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        # 创建发布目录
        mkdir -p release
        
        # 打包项目代码，排除不需要的文件
        tar -czf release/ghpc-translation-${{ steps.date.outputs.date }}.tar.gz \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='node_modules' \
          --exclude='*.log' \
          --exclude='.env*' \
          --exclude='release' \
          .
        
        # 创建 zip 格式的压缩包
        zip -r release/ghpc-translation-${{ steps.date.outputs.date }}.zip . \
          -x '.git/*' '.github/*' 'node_modules/*' '*.log' '.env*' 'release/*'
    
    - name: Generate release notes
      if: steps.changes.outputs.has_changes == 'true'
      id: release_notes
      run: |
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "## 自动发布 - ${{ steps.date.outputs.date }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 变更内容:" >> $GITHUB_OUTPUT
        git log --oneline HEAD~5..HEAD | sed 's/^/- /' >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 包含文件:" >> $GITHUB_OUTPUT
        echo "- 完整项目源代码" >> $GITHUB_OUTPUT
        echo "- 排除了 .git, .github, node_modules 等文件" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "发布时间: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      if: steps.changes.outputs.has_changes == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: release-${{ steps.date.outputs.date }}
        release_name: 自动发布 ${{ steps.date.outputs.date }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false
      id: create_release
    
    - name: Upload Release Assets
      if: steps.changes.outputs.has_changes == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/ghpc-translation-${{ steps.date.outputs.date }}.tar.gz
        asset_name: ghpc-translation-${{ steps.date.outputs.date }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload ZIP Release Asset
      if: steps.changes.outputs.has_changes == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/ghpc-translation-${{ steps.date.outputs.date }}.zip
        asset_name: ghpc-translation-${{ steps.date.outputs.date }}.zip
        asset_content_type: application/zip